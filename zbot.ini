; COMING SOON! This is a project.
alias ld_on{ /msg $chan LOCKDOWN ENABLED! KICKING USERS IN 5 SECONDS! 
.timer lockdown 0 5 kick $chan
/say Kicked users! }
alias ld_off{ /msg $chan LOCKDOWN DISABLED! Users can now join. 
.lockdown off}

#greet on
on 1:JOIN:#:{ .notice $nick Hi there, welcome to $chan ! This network has several rules: 1: No swearing. We like a clean, nice chat enviorment. 2: NO CLONES. CLONES WILL BE BANNED. 3: ENGLISH ONLY!!! We are an US server. }
#greet end
alias autogreet_on { .enable #greet | /msg $nick The auto-greet is now switched ON }
alias autogreet_off{ .disable #greet | /msg $nick The auto-greet is now switched OFF }
alias clonewatch_on{ .enable #clone
.say Clone watch is enabled.}
alias clonewatch_off{ .disable #clone
/say Clone watch is off.}
alias tfp_on{.enable #tfp
/say Text Flood Protection protocols established.}
alias tfp_off{.disable #tfp
/say Text Flood Protection protocols disconnected.}
alias firewall_o {.enable fire
/say Firewall on!}
alias firewall_i {.disable fire
/say Firewall off!}
alias advancepro_o {.firewall_o
.tfp_on
.clonewatch_on}
alias advancepro_i {.firewall_i
.tfp_off
.clonewatch_off}
;HELP AREA
alias zbothelp {.echo ZBOT VER 1.1.1 HELP
.echo /tfp_on Turns on text flood protection (off = ftp off)
.echo /advancepro_o Turns on advanced protection.
.echo /advancepro_i Turns off advanced protection.
.echo ADVANCED PROTECTION CONSISTS OF A FIREWALL AND A CLONE WATCH SYSTEM.
.echo /autogreet_on Enable autogreet
.echo /autogreet_off Disable autogreet
.speak END OF HELP SECTION.}
alias zbotver {.speak ZBot Version Information Request sent.
.speak Waiting...
.speak Done!
/echo ZBot 1.1.1 by Thomas D. Streiff}
;firewall
#fire on
alias ProxyList {
  ; Syntax: /ProxyList [-pageNo]
  ; eg. /ProxyList 4
  ; ----------------
  ; By Jonesy44
  ; ----------------
  ; EDIT THIS NEXT LINE FOR PROXYLIST FILE NAME!
  set %ProxyList.FileName ProxyList.dat
  ; STOP EDITING HERE!
  
  .sockclose ProxyList.1 | .sockclose ProxyList.2 | .sockclose ProxyList.3
  .remove %ProxyList.FileName
  .timerCompletedCheck 0 1 ProxyList.CompletedCheck
  var %n = 1
  echo -a 2* FireOS Firewall: Downloading latest proxy list..
  while %n <= $iif($1 isnum 1-,$1,3) {
    sockopen $+(ProxyList.,%n) samair.ru 80
    inc %n
  }
}
alias ProxyList.CompletedCheck {
  if !$sock(ProxyList.1) || !$sock(ProxyList.2) || !$sock(ProxyList.3) {
    echo -a 4Succesfully downloaded $lines(%ProxyList.FileName) proxy addresses. Stored in $qt(%ProxyList.FileName)
    .timerCompletedCheck off
    unset %ProxyList.*
  }
}
alias ProxyList.RemoveHTML return $regsubex($1-,/(^[^<]*>|<[^>]*>|<[^>]*$)|&[^;]+;|       /g,$null)
on *:sockopen:ProxyList.*:{
  if $sockerr { echo -a FireOSCrash:Socket error: $sock($sockname).wsmsg }
  else { 
    sockwrite -nt $sockname GET $+(/proxy/time-0,$gettok($sockname,2,46),.htm) HTTP/1.1 
    sockwrite -nt $sockname Host: samair.ru
    sockwrite -nt $sockname $crlf
  }
}
on *:sockread:ProxyList.*:{
  var %SocketRead
  sockread %SocketRead
  if !$sockerr {
    if $regex(%SocketRead,/(\D=\d)/g) {
      var %Index = 1,
      while %Index <= $regml(0) {
        set %ProxyList.Decode. [ $+ [ $gettok($sockname,2,46) ] ] $+(%ProxyList.Decode. [ $+ [ $gettok($sockname,2,46) ] ],$chr(32),$gettok($regml(%Index),1,61),-,$gettok($regml(%Index),2,61))
        inc %Index
      }
      echo -a 2* ProxyList: Generating decode key for page $gettok($sockname,2,46) -- 3Created key succesfully!
    }
    if $regex(%SocketRead,/<tr><td>.*<\/td><\/tr>/i) { 
      var %SocketRead = $remove($ProxyList.RemoveHTML(%SocketRead),document.write,$chr(40),+,")
      var %Index = 1
      while %Index <= $numtok(%SocketRead,41) {
        noop $regex($gettok(%SocketRead,%Index,41),/(\d+.\d+.\d+.\d+\:.*)/)
        var %Output = $regml(1)
        if $regml(1) {
          var %SubIndex = 1
          while %SubIndex <= $numtok(%ProxyList.Decode. [ $+ [ $gettok($sockname,2,46) ] ],32) {
            %Output = $replace(%Output,$gettok($gettok(%ProxyList.Decode. [ $+ [ $gettok($sockname,2,46) ] ],%SubIndex,32),1,45),$gettok($gettok(%ProxyList.Decode. [ $+ [ $gettok($sockname,2,46) ] ],%SubIndex,32),2,45))
            inc %SubIndex
          }
          write %ProxyList.FileName %Output
        }
        inc %Index 1
      }
    }
  }
  else echo -a FireOSCrash:Socket error: $sock($sockname).wsmsg 
}

#fire
;clone protection
#clone on
on @*:PART:#channel: {
  VAR %id = *!~*@* , %fa = $fulladdress
  IF (%fa iswm %id) {
    IF (%id. [ $+ [ $wildsite ] ] == $null) {
      SET -u10 %id. [ $+ [ $wildsite ] ] 1
      RETURNn
    }
    ELSE { INC %id. [ $+ [ $wildsite ] ] }
    IF ((%id. [ $+ [ $wildsite ] ] > 4) && (%id-check == $null)) {
      SET -u8 %id-check 1
      raw -q mode # +bbcR *!~*@* $wildsite
      .notice # Bans and modes auto set due to possible floods, please be patient. Thank you.
      .timer_id-flood 1 30 raw -q mode # -bcR *!~*@*
    }
  }
}
#clone
;text flood protection
#tfp on

ON @*:TEXT:*:#: {
; Defines on text so it triggers only if you're operator on the target channel
  IF ($nick !isop #) {
  ; Tells mIRC to go on if the nick isn't an operator
    IF (%r. [ $+ [ $nick ] $+ . $+ [ $chan ] ] == $null) {
      ; Checks if $nick has a prior record...
      ; If $nick is clean, this creates user records for the nick...
      SET -u60 %r. [ $+ [ $nick ] $+ . $+ [ $chan ] ] 1
      ; mIRC creates a variable according to the nick and channel for 60 secs
      ; This stores the amount the nick has repeated within 60 seconds...
      SET -u60 %r.text. [ $+ [ $nick ] $+ . $+ [ $chan ] ] $1-
      ; This stores the users text, used to check future text for matches...
      ; Replace 60 to adjust listening duration, 60 seconds = 1 minute
      ; mIRC resets stats after 60 seconds according to current settings
      RETURN
    }
    VAR %rps = %r. [ $+ [ $nick ] $+ . $+ [ $chan ] ]
    ; %rps now represents how many times the user repeated...
    VAR %rpt = %r.text. [ $+ [ $nick ] $+ . $+ [ $chan ] ]
    ; %rpt represents the users previous text...
    IF (%rpt == $1-) {
    ; Checks if the current text matches previous text...
    ; If they match, the user repeated...
      INC %r. [ $+ [ $nick ] $+ . $+ [ $chan ] ]
      ; Since the user repeated, we increase his/her stats by 1
      IF (%rps > 2) {
      ; Checks if the user repeats more than twice
      ; Replace 2 with your limits
      ; Current settings kick/ban after 3 or more repeats...
        ban # $nick 2
        kick # $nick You repeatedly spammed our server! Sorry. But we kicked you for spamming
        ; User repeated more than twice and is kick/banned...
      }
    }
  }
}
#tfp
